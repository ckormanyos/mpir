///////////////////////////////////////////////////////////////////////////////
//      Copyright Christopher Kormanyos 2020 - 2025.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//

// This example exercises Boost.Multiprecision in concurrent multi-threaded
// environments. To do so loops involving non-trivial calculations
// of numerous function values has been implemented. The calculations
// are executed in concurrent as well as sequential running environments.

// In particular, this example uses an AGM method to do a "from the ground up"
// calculation of logarithms. The logarithm functions values are compared
// with the values from Boost.Multiprecision's specific log functions
// for the relevant backends. The log AGM here is not particularly well
// optimized nor intended for high-performance work. It can, however,
// be taken as an interesting example of an AGM iteration if this is helpful.

// This example has been initially motivated in part by discussions in:
// https://github.com/boostorg/multiprecision/pull/211

// We find the following performance data here:
// https://github.com/boostorg/multiprecision/pull/213
//
// cpp_dec_float:
// result_is_ok_concurrent: true, calculation_time_concurrent: 18.1s
// result_is_ok_sequential: true, calculation_time_sequential: 48.5s
//
// cpp_bin_float:
// result_is_ok_concurrent: true, calculation_time_concurrent: 2.2s
// result_is_ok_sequential: true, calculation_time_sequential: 8.9s
//
// gmp_float:
// result_is_ok_concurrent: true, calculation_time_concurrent: 0.5s
// result_is_ok_sequential: true, calculation_time_sequential: 2.2s
//
// mpfr_float:
// result_is_ok_concurrent: true, calculation_time_concurrent: 0.6s
// result_is_ok_sequential: true, calculation_time_sequential: 1.9s

#include <boost/math/special_functions/prime.hpp>

#include <array>
#include <atomic>
#include <cstddef>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <limits>
#include <thread>
#include <vector>

constexpr unsigned number_of_primes          = 1000U;
constexpr unsigned decimal_digits_to_use     = 1001U;
constexpr unsigned report_granularity_to_use =   50U;

#define BOOST_MP_BACKEND_CPP_DEC_FLOAT       101
#define BOOST_MP_BACKEND_GMP_FLOAT           102
#define BOOST_MP_BACKEND_CPP_BIN_FLOAT       103
#define BOOST_MP_BACKEND_MPFR_FLOAT          104

#define BOOST_MP_BACKEND_TYPE BOOST_MP_BACKEND_GMP_FLOAT

#if !defined(BOOST_MP_BACKEND_TYPE)
//#define BOOST_MP_BACKEND_TYPE  BOOST_MP_BACKEND_CPP_DEC_FLOAT
//#define BOOST_MP_BACKEND_TYPE  BOOST_MP_BACKEND_CPP_BIN_FLOAT
#define BOOST_MP_BACKEND_TYPE  BOOST_MP_BACKEND_GMP_FLOAT
//#define BOOST_MP_BACKEND_TYPE  BOOST_MP_BACKEND_MPFR_FLOAT
#endif

#if  (BOOST_MP_BACKEND_TYPE == BOOST_MP_BACKEND_CPP_DEC_FLOAT)
#include <boost/multiprecision/cpp_dec_float.hpp>

using big_float_type = boost::multiprecision::number<boost::multiprecision::cpp_dec_float<decimal_digits_to_use>,
                                                     boost::multiprecision::et_off>;

#elif (BOOST_MP_BACKEND_TYPE == BOOST_MP_BACKEND_CPP_BIN_FLOAT)
#include <boost/multiprecision/cpp_bin_float.hpp>

using big_float_type = boost::multiprecision::number<boost::multiprecision::cpp_bin_float<decimal_digits_to_use>,
                                                     boost::multiprecision::et_off>;

#elif  (BOOST_MP_BACKEND_TYPE == BOOST_MP_BACKEND_GMP_FLOAT)
#include <boost/multiprecision/gmp.hpp>

using big_float_type = boost::multiprecision::number<boost::multiprecision::gmp_float<decimal_digits_to_use>,
                                                     boost::multiprecision::et_off>;

#elif  (BOOST_MP_BACKEND_TYPE == BOOST_MP_BACKEND_MPFR_FLOAT)
#include <boost/multiprecision/mpfr.hpp>

using big_float_type = boost::multiprecision::number<boost::multiprecision::mpfr_float_backend<decimal_digits_to_use>,
                                                     boost::multiprecision::et_off>;

#else
#error BOOST_MP_BACKEND_TYPE is undefined.
#endif

namespace boost { namespace multiprecision { namespace exercise_threading {

namespace detail {

namespace my_concurrency {
template<typename index_type,
         typename callable_function_type>
void parallel_for(index_type             start,
                  index_type             end,
                  callable_function_type parallel_function)
{
  // Estimate the number of threads available.
  static const unsigned int number_of_threads_hint =
    std::thread::hardware_concurrency();

  static const unsigned int number_of_threads_total =
    ((number_of_threads_hint == 0U) ? 8U : number_of_threads_hint);

  // Use all the available cores except 1.
  static const unsigned int number_of_threads { number_of_threads_total - 1U };

  std::cout << "Executing with " << number_of_threads << " threads" << std::endl;

  // Set the size of a slice for the range functions.
  index_type n = index_type(end - start) + index_type(1);

  index_type slice =
    static_cast<index_type>(std::round(n / static_cast<float>(number_of_threads)));

  slice = (std::max)(slice, index_type(1));

  // Inner loop.
  auto launch_range =
    [&parallel_function](index_type index_lo, index_type index_hi)
    {
      for(index_type i = index_lo; i < index_hi; ++i)
      {
        parallel_function(i);
      }
    };

  // Create the thread pool and launch the jobs.
  std::vector<std::thread> pool;

  pool.reserve(number_of_threads);

  index_type i1 = start;
  index_type i2 = (std::min)(index_type(start + slice), end);

  for(index_type i = 0U; ((index_type(i + index_type(1U)) < number_of_threads) && (i1 < end)); ++i)
  {
    pool.emplace_back(launch_range, i1, i2);

    i1 = i2;

    i2 = (std::min)(index_type(i2 + slice), end);
  }

  if(i1 < end)
  {
    pool.emplace_back(launch_range, i1, end);
  }

  // Wait for the jobs to finish.
  for(std::thread& thread_in_pool : pool)
  {
    if(thread_in_pool.joinable())
    {
      thread_in_pool.join();
    }
  }
}
} // namespace my_concurrency

template<typename FloatingPointType,
         typename UnsignedIntegralType>
FloatingPointType pown(const FloatingPointType& b, const UnsignedIntegralType& p)
{
  // Calculate (b ^ p).

  using local_floating_point_type    = FloatingPointType;
  using local_unsigned_integral_type = UnsignedIntegralType;

  local_floating_point_type result;

  if     (p == local_unsigned_integral_type(0U)) { result = local_floating_point_type(1U); }
  else if(p == local_unsigned_integral_type(1U)) { result = b; }
  else if(p == local_unsigned_integral_type(2U)) { result = b; result *= b; }
  else
  {
    result = local_floating_point_type(1U);

    local_floating_point_type y(b);

    for(local_unsigned_integral_type p_local(p); p_local != local_unsigned_integral_type(0U); p_local >>= 1U)
    {
      if((static_cast<unsigned>(p_local) & 1U) != 0U)
      {
        result *= y;
      }

      y *= y;
    }
  }

  return result;
}

const std::vector<std::uint32_t>& primes()
{
  static std::vector<std::uint32_t> my_primes;

  if(my_primes.empty())
  {
    my_primes.resize(number_of_primes);

    // Get the list of primes.
    for(std::size_t i = 0U; i < my_primes.size(); ++i)
    {
      my_primes[i] = boost::math::prime((unsigned int) i);
    }
  }

  return my_primes;
}

template<typename StringConstructableFloatType>
const StringConstructableFloatType& pi()
{
  static const StringConstructableFloatType my_pi
  (
    // N[Pi, 10003]
    "3."
    "1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"
    "3809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009"
    "9465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659250937221696461515709858387410597885959772975498930161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390451244136549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136867228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265867821051141354735739523113427166102135969536231442952484937187110145765403590279934403742007310578539062198387447808478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961"
    "5679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396"
    "6655730925471105578537634668206531098965269186205647693125705863566201855810072936065987648611791045334885034611365768675324944166803962657978771855608455296541266540853061434443185867697514566140680070023787765913440171274947042056223053899456131407112700040785473326993908145466464588079727082668306343285878569830523580893306575740679545716377525420211495576158140025012622859413021647155097925923099079654737612551765675135751782966645477917450112996148903046399471329621073404375189573596145890193897131117904297828564750320319869151402870808599048010941214722131794764777262241425485454033215718530614228813758504306332175182979866223717215916077166925474873898665494945011465406284336639379003976926567214638530673609657120918076383271664162748888007869256029022847210403172118608204190004229661711963779213375751149595015660496318629472654736425230817703675159067350235072835405670403867435136222247715891504953098444893330963408780769325993978054193414473774418426312986080998886874132604721"
    "5695162396586457302163159819319516735381297416772947867242292465436680098067692823828068996400482435403701416314965897940924323789690706977942236250822168895738379862300159377647165122893578601588161755782973523344604281512627203734314653197777416031990665541876397929334419521541341899485444734567383162499341913181480927777103863877343177207545654532207770921201905166096280490926360197598828161332316663652861932668633606273567630354477628035045077723554710585954870279081435624014517180624643626794561275318134078330336254232783944975382437205835311477119926063813346776879695970309833913077109870408591337464144282277263465947047458784778720192771528073176790770715721344473060570073349243693113835049316312840425121925651798069411352801314701304781643788518529092854520116583934196562134914341595625865865570552690496520985803385072242648293972858478316305777756068887644624824685792603953527734803048029005876075825104747091643961362676044925627420420832085661190625454337213153595845068772460"
    "2901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867"
    "4460477464915995054973742562690104903778198683593814657412680492564879855614537234786733039046883834363465537949864192705638729317487233208376011230299113679386270894387993620162951541337142489283072201269014754668476535761647737946752004907571555278196536213239264061601363581559074220202031872776052772190055614842555187925303435139844253223415762336106425063904975008656271095359194658975141310348227693062474353632569160781547818115284366795706110861533150445212747392454494542368288606134084148637767009612071512491404302725386076482363414334623518975766452164137679690314950191085759844239198629164219399490723623464684411739403265918404437805133389452574239950829659122850855582157250310712570126683024029295252201187267675622041542051618416348475651699981161410100299607838690929160302884002691041407928862150784245167090870006992821206604183718065355672525325675328612910424877618258297651579598470356222629348600341587229805349896502262917487882027342092222453398562647669149055628425039127"
    "5771028402799806636582548892648802545661017296702664076559042909945681506526530537182941270336931378517860904070866711496558343434769338578171138645587367812301458768712660348913909562009939361031029161615288138437909904231747336394804575931493140529763475748119356709110137751721008031559024853090669203767192203322909433467685142214477379393751703443661991040337511173547191855046449026365512816228824462575916333039107225383742182140883508657391771509682887478265699599574490661758344137522397096834080053559849175417381883999446974867626551658276584835884531427756879002909517028352971634456212964043523117600665101241200659755851276178583829204197484423608007193045761893234922927965019875187212726750798125547095890455635792122103334669749923563025494780249011419521238281530911407907386025152274299581807247162591668545133312394804947079119153267343028244186041426363954800044800267049624820179289647669758318327131425170296923488962766844032326092752496035799646925650493681836090032380929345"
    "9588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678"
    "57"
  );

  return my_pi;
}

template<typename StringConstructableFloatType>
const StringConstructableFloatType& ln_two()
{
  static const StringConstructableFloatType my_ln_two
  (
    // N[Log[2], 10003]
    "0."
    "6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707516350759619307275708283714351903070386238916734711233501153644979552391204751726815749320651555247341395258829504530070953263666426541042391578149520437404303855008019441706416715186447128399681717845469570262716310645461502572074024816377733896385506952606683411372738737229289564935470257626520988596932019650585547647033067936544325476327449512504060694381471046899465062201677204245245296126879465461931651746813926725041038025462596568691441928716082938031727143677826548775664850856740776484514644399404614226031930967354025744460703080960850474866385231381816767514386674766478908814371419854942315199735488037516586127535291661000710535582498794147295092931138971559982056543928717000721808576102523688921324497138932037843935308877482597017155910708823683627589842589185353024363421436706118923678919237231467232172053401649256872747782344535347"
    "6481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270693"
    "5747240493386530879758721699645129446491883771156701678598804981838896784134938314014073166472765327635919233511233389338709513209059272185471328975470797891384445466676192702885533423429899321803769154973340267546758873236778342916191810430116091695265547859732891763545556742863877463987101912431754255888301206779210280341206879759143081283307230300883494705792496591005860012341561757413272465943068435465211135021544341539955381856522750221424566440006276183303206472725721975152908278568421320795988638967277119552218819046603957009774706512619505278932296088931405625433442552392062030343941777357945592125901992559114844024239012554259003129537051922061506434583787873002035414421785758013236451660709914383145004985896688577222148652882169418127048860758972203216663128378329156763074987298574638928269373509840778049395004933998762647550703162216139034845299424917248373406136622638349368111684167056925214751383930638455371862687797328895558871634429756244755392366369488877823890174981027"
    "3565524050518547730619440524232212559024833082778888890596291197299545744156245124859268311260746797281638090250005655999146128332543581114048482060640824224792403855764762350311003242597091425011146155848306700125831821915347207474111940098355732728261442738213970704779562596705790230338480617134555536855375810657497344479225111965461618278960100685129653954796586637835224736245460935850360506784143911445231457780335917921127955705055554514387888188153519485934467246429498640506265184244753956637833734822075332944813064933603546101017746493267877167198612073968320123596077290246830459403130563776313240108042028543590269450940307400149339507673160285028697303187182399843352574354995608502566089783395564211494807339362607510238183314110047089039501343302974134748405406158775396888381540769801776730369991074924697847843128430364112892028012272563468391623354787727340063958657179819069358127387034335313189050383845616444442927969063837969092441303965600987663584627766076053486974908593811"
    "9393092517911988555277653566607624393568771942331666428382007448163078652292356598265862759187475208750914476090169735693572318242499194754944316314633922707432445903024825444124903594099007113773263109980777239375790926677872262995677737591252687546917603955014736337374616450764577715981466107583993030432313494965864822846784952475402979689001510984243408167226410534651753188957093414626589139801731236762488745855026996192466780524258823789959071441857535595190193138262755935001848260810769064940679244358858315035260170450093467140873847278951678454152522670236969054686984460721098217747366065475232420890638176883356533083454290520236621736816890218100918592701164162563371092109191938110884083719954941395280874384765933151646452448371434955470717674786446677777732624005994428038830050520639602544872219401004824568355849141163720216501482904889541054859885821391467392801279607837657980301901978958312984458423505516280471384570983671431795984979833849366430513574397784640802839449964928"
    "3617720121752971960111518923347566466448721470400595270020824797119629125957079132287525024225275228566313043051121949377154294071049224714797815453298506882289269488223421814177347791228970593038516786441235127732137994705131308656152609176742141289789979427710841049555905492995846031292895641072337934722198262960246577885985564915354252627693645781715768750562769595194061476951336213589662110367239018618344910084705602324088574073649806491335049772722985412155992256490590320416580077713036548444879098580291680677229873848480539143712688284515899628929046495360697649132264972901758104649039660124902680914422669630653224053279318052013899030250670164594614509327899187497505884595089281231314653584115645478628887671179275944418910322703397269941078262094906693919323364952884039841053417413103028429829838459727450968915350522980623244092313811057843565473409867519383860728240789752379906522153682844964151952043614300234064117767172081947074281247061607867913971425756102687732567256651877"
    "9398869543561247252503824110532837942494962425075385985566130187632566463726695281899182447028336064458337646946313432313914423530118060852644531774177829165319868877107483800215964071937546885362724120722736141210013984094390772718393471792022895741896562095677977039547595272233827891909436958956141581883760856034834063384906401173599284897189611655350881207229167416716902882811061704372980788755174869275740035755306007315351924334950734050193793931810588767452835236416527690371651749224459625244061326021533148024272969622677771345064205355151024831061088767266294511910945817001717135117299890025904644763066359724199051847024911088680124694191549654441175995933753867861532885105055485957519052829926745974805776695003496600239248911757605776389825650559728570971462382136461281575699631424743375953147095068089204461516870319405483113785049768421845778096360358356776814229804015130588032213887006143666466195154562642826797900580907023312944256272924492983069495929158131775714230468246948"
    "6857726314081926674929772539743756365203107556202765117547407672845328319997506485537156785213404792052661535026151150356406251891749898352529576071186118970319875837950865821244714485548098909713227841104361632150544561892564156864800976875271727936316623567693430507054009607852975769733478163397865035634475960831130589187410887754764989661407670935400992896790330051971292292946559088131550937923116526762482009742553205013510883040341150186686281727844485183209998931138104801148473643382615504748270001027278715553796076269777262330614285973220370177164880139359067316515931312072256600100573067878158759682373274326648631525516325390695220551524604154736726647158297197591001763292467553919479244125968559869184312667168760661147742124931315475771110299052756988494792182854292007719911381106402013108502967022237263719274325205086058839399458141435359466009555137036851514395344251322516232744817692847483351601814314837757729102659770502163755133176163209069621023638527066273373626901536962"
    "5507361088424157630815154905861896045022386485172371030570090206682645851496003782813483122885470859777556219575228696991467195454031081669626969029689622271555266812300333654992842792461225039557099961469297169433935154450855751614286696335182639390119255198771270766940920041084299738298507256299034585043358447819361749768796368848151701460384149318945856731095588979938416661669743184215108867818274727477192206243977806608466463097788819531559610359556752045585957203659163552258295953673403778211240989398807307354183621312108837517038036823616360448183264453177108673935775104191422090696691782264747624872691980261286108374486523304418580743740679992465935914643068192455855577183631404179724592583726587693087276662991080450434859149599696250194105269190482762996890300360235763642425439767056458254099641404145099467034538774312570265529219960842821107067203911052625056198091492642944319130836290202615837217220747990416690350059407281416049396536557273412233933280610337003702100821153419"
    "2227293534916762079885625851679806479158586942391146178726357859291357726649656033071530623284906061534893403415083718713352615870286424651827290435568456552106161725177136625005254799445985467661817786025877803806030984445445231764300573378558790455136113162544138851136958094835849584914934421251105356131748993037427322843117221670118781585253525367038010852035298366282616347129789683306531521000247432193921670599073133403022837905315374833325886025968671733006730262612955255637933976817300485239406795549141449465881533293253950529298238146676292254117063142342669344856493368632531418747139643415905283733805759990776658169381718971757458617472391097384196997646199589679391854451098059585787249716421848244964174409657751106908793193517216376221168703906403811218433433897183542006078817356825697886748930465585244588375921264841779920836375927805215882886594444347071772120467466371740330707609189137396956143477741839440991803548117653335878130833510705646029925695615913401856601359655560"
    "624"
  );

  return my_ln_two;
}

template<typename StringConstructableFloatType>
const StringConstructableFloatType& catalan()
{
  static const StringConstructableFloatType my_catalan
  (
    // N[Catalan, 10003]
    "0."
    "9159655941772190150546035149323841107741493742816721342664981196217630197762547694793565129261151062485744226191961995790358988033258590594315947374811584069953320287733194605190387274781640878659090247064841521630002287276409423882599577415088163974702524820115607076448838078733704899008647751132259971343407485407553230768565335768095835260219382323950800720680355761048235733942319149829836189977069036404180862179411019175327431499782339761055122477953032487537187866582808236057022559419481809753509711315712615804242723636439850017382875977976530683700929808738874956108936597719409687268444416680462162433986483891628044828150627302274207388431172218272190472255870531908685735423498539498309919115967388464508615152499624237043745177737235177544070853846440132174839299994757244619975496197587064007474870701490937678873045869979860644874974643872062385137123927363049985035392239287879790633644032354784535851927777787270906083031994301332316712476158709792455479119092126201854803963934243"
    "4956537596739494354730014385180705051250748861328564129344959502298722983162894816461622573989476231819542006607188142759497559958983637303767533853381354503127681724011814072153468831683568168639327293677586673925839540618033387830687064901433486017298106992179956530958187157911553956036689036990493966753843775810493189955385516262196253316804016273752130120940604538795076053827123197467900882369178615573389124417223833938148120775994298491724397668575632718068808279982979378849432724934657607490543874819526813074437046294635892810276531705076547974494839948959477092788591195848724127866084088554597823812492260505610094584486698958576871611171786662336847409949385541321093755281815525881591502228244454441718609946588151766496078223678970519269711312571375454370124329673057246845015819313016087766215650957554679666786617082347682558133518681937745650014565261704096074688953930234791980600084245562175108423471736387879369577878440933792219894575340961647424554622478788002922914803690711"
    "5270795545505414782688498185246005814466517868142315411487855409966516738539727614697016904391511490089333079184574657620996775481231382015436010988527216297701087615747817356416369857035534067264935196316955476721150777231590044833826051611638343086513979722516174138538129324801194636251880084039819455390551821042460629218521756024654860192976723974051103952645692429786421242403751892678729602717733787383799783266762086119520679121512638211925232940406920599438642746932153388566711733082714240833265920326075316592804231023099735840039594034263222768807011868196176780905631581597845376375783563735902771648831310288769379505350732080180758102238230803176250432942472226839122971295535135510431476188665547436769218412018877161799228562056352205470320069180868806612117420406099241234876051540682022625595048124858941187358346822904230836155547694777708319408748124916748929006593696164166234368370754396383894514401195564873813429212298200130210799619224249244930519992358581580826035249799850"
    "5918669722012316489710483070179352811222896635512831743735239301140279238980874456964830901320787765878536230135428000162905587729500679587617824737487137806004220844534604506470244325808516477717390319602865553832828141591524873526330715051314788284499923866324319810633651524331132146390093336215916074448292345717745481716958018168890017528564504648913909042035602983604565242526579727013858675765389930295844925869218978864438881935811452677056316060973768465408369423020381682639245857910740487087987785242614086871517857580100602368170349179773362219662953771891385311673996556588591216462801558262987354137633607607302004559120294665734757185274531163384777648683824850411630160522708694444270364425124236397181499923496083895916825803616474988104263948389004294055043150219312686423005999292636154064926266418658359490424937152362206840394037010868074009844000151246534353506723384546946357602118676211434142476117834104312730611678224883396991553909131097323106678111748553767902723184507654"
    "5775699887411395686146631581361573674061881125914620397423401125882131569075175754979658229689846231329257273175338302313533232870056595688534175204573932758183513982347678009261426521074710456668763134325667275929891952548849037809046546488268575204454695053813498309021460489718319387780863409014168285484524248093104343217724788778248739486061800233415225914146138782700545170971410457656614928953108672486080484204376637936230213645817798022720882738071736711299822289069125763027779162651035762577038104288680376054636303337940367377696744757171918712803954370966413877226626889837311111602004518593973174764621542838460162144526553720292552051504941828003032550267579038252786139633572720650890367820176258573636602459644914533528141037251683822090097101943680278336708963314672497329503919259298514966414498521873384370124517467421871213110205726174340134056876555104187866544518902765005382178609412105353899784905982180023067890821606141367018393687028304544346780536499566495053180837980207"
    "9503658352276220065067861771710956720056297030235535933738697718328353375572623444156649160057626666041990852767897035041932955545687453388421213048798620009287061780076785927351753865236773485350530661253960255362808093505625628213474323943992224427397115627559852443391041261804335069871341042809784568695189776688826505037561675915354731736681356833531685884402667262031966007851949052618190161355408832105644054090272162044988510417612927878842278518352007044394609615716655434483928025925011563062276507400503123514176565264499430425705315022305522335766342089431023858670606304302977198532242120432986195286331621994798030216511700718532167680950619341672862846747533072110055118542257586292926814063816024613769520432786778523519408974877995882626510188571675264489642595162456081646805866626058443282815376692095017001316910938643914700333459067018687992464831091818558481046311189547672583036689226571169905654317599886802867311458734575497774405622658413379247427188700782685546567822903364"
    "6251538989848130338284880157880664698448021716694938171399856178771737877871273996983426749997163226832725797257211542282247158517548510507797096156071837077138399826531636537675812475187839835045758831179075554568661739592872955871938621922357387643860701740105935974427858141127139568050496126996004843458389643669701477114032917806508492587300820990617958758040299661829202182069615574562881098022357619516396786762660973679549234378915410018572898981683785842730361244845653242635348314892550648078219827051836656213738092369590775215169834652610323773841508983065813648713091823138336005592254001752627874212458262528237084154906823317652568624624560956433201249797068041246522041709969381972852736126391822956482434690428030358268329357392793414496255282764361843354262066413468315637022263287683908790059716633258066433109588181275324862789298009486815890245271469241081839431303491687336976581151940227733980095401999252151434960734147453903923041199089964039076032916511192955102866674148788"
    "8146370780055212485563601811272094261309853801454061531585422664625843416142595014823689366366735542832720063760749018108182214340861973911548328544384315811917349722801704172459572971660809528522210471512385830056016372167813179800095725635672059859413601259647770490028817068063068944393809042066274116418284908815132355567686236301149153615835301929518669408266688060717443297219890870195003345427130936321480897947531976335087806006735145801884222411475843568459595642012392746288926431857096931750781433192768351309119874941923765705532160176241226139675957034480490314072757977766284315056551277393854632895972421929264699107855832088971233051922897717260248197053719683239188010267755856584529891014031105506836583574883237481454355676661805833306498942393994388379965296325401019799634146428782283377256296616846911720121828661474404077735591989241075123126002042456108959229931398206017121311234380896737575014319013773810588142008068583268348860835919739558648453632085482935260075146055373"
    "1540568079151101048678542045024317848121776406966416544668619239210358230899442777561173557266224125077243607726011745572834330603181058990407801918744900949254012797482869241886188853577236189719337382594749056970755345201153154027333118283779761247170150576257064655296799897182230873814226743577485204949515549301153122373497997582576182028317544521214311367909142708881084342389615836576573488488699018972855105693456375561971362356805104333758246047837406716290509691220530949693422736458886161807497322540290652651573742084416965028682192896877801820229167098175192630291660755605446310576075098207841220374690944034812326691252157124330870103537890349000906643292643725779750241824330284378092108448051314496374504507208211728852379939490486261381992522052393067273693059352176372166188904194278441469089937649018485713794294523770413025010475698868540930433653703029367695209563827717704534719329069964749837982412276976094331079408584031054912131344696275752331337321108030992425788565804104"
    "0079831661945569701599917621887866447194317546991649741520251806448877887985166966690501806961177895319677765511995136578355296228575679025721386033541608897984695597216057137173459782925150131146009790237307241203635433588344878103636502521533751542635664155068591620834877000812706454698384230674135069739238548841136427433384899180382076512355937559056301241721917198088943293211365016689536703579578371871412927951823196775077052730143556689098772815621393844232162162161971429326170760137074663600439766842321077254403779240741912177019894286154533015842513183518208113781913815423542155960838996708562951689526267199396640573419309148909818494148218841181017814237455735098848882581594204563198422321436031740934071356176780901434798699419057958943555583075070097288378792490653344012468305502008705087364565309555791707162299943796237776319056633768772370088746745395711078167247218800431295787521446779644996051180003424672524585953920320467088088978931754117949322498130899564183829537871503"
    "776"
  );

  return my_catalan;
}

} // namespace detail

template<typename FloatingPointType>
FloatingPointType log(const FloatingPointType& x)
{
  // Use an AGM method to compute the logarithm of x.

  // For values less than 1 invert the argument and
  // remember (in this case) to negate the result below.
  const bool b_negate = (x < 1);

  const FloatingPointType xx = ((b_negate == false) ? x : 1 / x);

  // Set a0 = 1
  // Set b0 = 4 / (x * 2^m) = 1 / (x * 2^(m - 2))

  FloatingPointType ak(1U);

  const float n_times_factor = static_cast<float>(static_cast<float>(std::numeric_limits<FloatingPointType>::digits10) * 1.67F);
  const float lgx_over_lg2   = std::log(static_cast<float>(xx)) / std::log(2.0F);

  std::int32_t m = static_cast<std::int32_t>(n_times_factor - lgx_over_lg2);

  // Ensure that the resulting power is non-negative.
  // Also enforce that m >= 8.
  m = (std::max)(m, static_cast<std::int32_t>(8));

  FloatingPointType bk = detail::pown(FloatingPointType(2), static_cast<std::uint32_t>(m));

  bk *= xx;
  bk  = 4 / bk;

  FloatingPointType ak_tmp(0U);

  using std::sqrt;

  // Determine the requested precision of the upcoming iteration in units of digits10.
  const FloatingPointType target_tolerance = sqrt(std::numeric_limits<FloatingPointType>::epsilon()) / 100;

  for(std::int32_t k = static_cast<std::int32_t>(0); k < static_cast<std::int32_t>(64); ++k)
  {
    using std::fabs;

    // Check for the number of significant digits to be
    // at least half of the requested digits. If at least
    // half of the requested digits have been achieved,
    // then break after the upcoming iteration.
    const bool break_after_this_iteration = (   (k > static_cast<std::int32_t>(4))
                                             && (fabs(1 - fabs(ak / bk)) < target_tolerance));

    ak_tmp  = ak;
    ak     += bk;
    ak     /= 2;

    if(break_after_this_iteration)
    {
      break;
    }

    bk *= ak_tmp;
    bk  = sqrt(bk);
  }

  // We are now finished with the AGM iteration for log(x).

  // Compute log(x) = {pi / [2 * AGM(1, 4 / 2^m)]} - (m * ln2)
  // Note at this time that (ak = bk) = AGM(...)

  // Retrieve the value of pi, divide by (2 * a) and subtract (m * ln2).
  const FloatingPointType result =
       detail::pi<FloatingPointType>() / (ak * 2)
    - (detail::ln_two<FloatingPointType>() * m);

  return ((b_negate == true) ? -result : result);
}

} } } // namespace boost::multiprecision::exercise_threading

template<typename FloatingPointType>
bool log_agm_concurrent(float& calculation_time)
{
  const std::size_t count = boost::multiprecision::exercise_threading::detail::primes().size();

  std::vector<FloatingPointType> log_results(count);
  std::vector<FloatingPointType> log_control(count);

  std::atomic_flag log_agm_lock = ATOMIC_FLAG_INIT;

  std::size_t concurrent_log_agm_count = 0U;

  const std::clock_t start = std::clock();

  boost::multiprecision::exercise_threading::detail::my_concurrency::parallel_for
  (
    std::size_t(0U),
    log_results.size(),
    [&log_results, &log_control, &concurrent_log_agm_count, &log_agm_lock](std::size_t i)
    {
      while(log_agm_lock.test_and_set()) { ; }
      const FloatingPointType dx = (FloatingPointType(1U) / (boost::multiprecision::exercise_threading::detail::primes()[i]));
      const FloatingPointType  x = boost::multiprecision::exercise_threading::detail::catalan<FloatingPointType>() + dx;
      log_agm_lock.clear();

      const FloatingPointType lr = boost::multiprecision::exercise_threading::log(x);
      const FloatingPointType lc = boost::multiprecision::log(x);

      while(log_agm_lock.test_and_set()) { ; }

      log_results[i] = lr;
      log_control[i] = lc;

      ++concurrent_log_agm_count;

      if((concurrent_log_agm_count % report_granularity_to_use) == 0U)
      {
        std::cout << "log agm concurrent at index "
                  << concurrent_log_agm_count
                  << " of "
                  << log_results.size()
                  << ". Total processed so far: "
                  << std::fixed
                  << std::setprecision(1)
                  << (100.0F * float(concurrent_log_agm_count)) / float(log_results.size())
                  << "%."
                  << "\r";
      }

      log_agm_lock.clear();
    }
  );

  calculation_time = static_cast<float>(std::clock() - start) / static_cast<float>(CLOCKS_PER_SEC);

  std::cout << std::endl;

  std::cout << "Checking results concurrent: ";

  bool result_is_ok = true;

  const FloatingPointType tol = std::numeric_limits<FloatingPointType>::epsilon() * 1000000U;

  for(std::size_t i = 0U; i < log_results.size(); ++i)
  {
    using std::fabs;

    const FloatingPointType close_fraction = fabs(1 - (log_results[i] / log_control[i]));

    result_is_ok &= (close_fraction < tol);
  }

  std::cout << std::boolalpha << result_is_ok << std::endl;

  return result_is_ok;
}

template<typename FloatingPointType>
bool log_agm_sequential(float& calculation_time)
{
  const std::size_t count = boost::multiprecision::exercise_threading::detail::primes().size();

  std::vector<FloatingPointType> log_results(count);
  std::vector<FloatingPointType> log_control(count);

  const std::clock_t start = std::clock();

  for(std::size_t i = 0U; i < log_results.size(); ++i)
  {
    const std::size_t sequential_log_agm_count = i + 1U;

    const FloatingPointType dx = (FloatingPointType(1U) / (boost::multiprecision::exercise_threading::detail::primes()[i]));
    const FloatingPointType  x = boost::multiprecision::exercise_threading::detail::catalan<FloatingPointType>() + dx;

    log_results[i] = boost::multiprecision::exercise_threading::log(x);
    log_control[i] = boost::multiprecision::log(x);

    if((sequential_log_agm_count % report_granularity_to_use) == 0U)
    {
      std::cout << "log agm sequential at index "
                << sequential_log_agm_count
                << " of "
                << log_results.size()
                << ". Total processed so far: "
                << std::fixed
                << std::setprecision(1)
                << (100.0F * float(sequential_log_agm_count)) / float(log_results.size())
                << "%."
                << "\r";
    }
  }

  calculation_time = static_cast<float>(std::clock() - start) / static_cast<float>(CLOCKS_PER_SEC);

  std::cout << std::endl;

  std::cout << "Checking results sequential: ";

  bool result_is_ok = true;

  const FloatingPointType tol = std::numeric_limits<FloatingPointType>::epsilon() * 1000000U;

  for(std::size_t i = 0U; i < log_results.size(); ++i)
  {
    using std::fabs;

    const FloatingPointType close_fraction = fabs(1 - (log_results[i] / log_control[i]));

    result_is_ok &= (close_fraction < tol);
  }

  std::cout << std::boolalpha << result_is_ok << std::endl;

  return result_is_ok;
}

int main()
{
  const big_float_type init_constants = 
      boost::multiprecision::exercise_threading::detail::catalan<big_float_type>()
    + boost::multiprecision::exercise_threading::detail::pi     <big_float_type>()
    + boost::multiprecision::exercise_threading::detail::ln_two <big_float_type>();

  std::cout << "init_constants: " << init_constants << std::endl;

  std::cout << "Calculating "
            << boost::multiprecision::exercise_threading::detail::primes().size()
            << " primes"
            << std::endl;

  float calculation_time_concurrent;
  const bool result_is_ok_concurrent = log_agm_concurrent<big_float_type>(calculation_time_concurrent);

  float calculation_time_sequential;
  const bool result_is_ok_sequential = log_agm_sequential<big_float_type>(calculation_time_sequential);

  std::cout << std::endl;

  std::cout << "result_is_ok_concurrent: "
            << std::boolalpha
            << result_is_ok_concurrent
            << ", calculation_time_concurrent: "
            << std::fixed
            << std::setprecision(1)
            << calculation_time_concurrent
            << "s"
            << std::endl;

  std::cout << "result_is_ok_sequential: "
            << std::boolalpha
            << result_is_ok_sequential
            << ", calculation_time_sequential: "
            << std::fixed
            << std::setprecision(1)
            << calculation_time_sequential
            << "s"
            << std::endl;
}
